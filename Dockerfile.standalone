# Standalone GardenIO Docker image with embedded PostgreSQL
FROM node:20-alpine AS build

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci

# Copy source code
COPY client ./client
COPY server ./server
COPY shared ./shared
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY tsconfig.json ./
COPY components.json ./
COPY drizzle.config.ts ./

# Build both frontend and backend
RUN npm run build

# Production stage with PostgreSQL
FROM node:20-alpine AS production

# Install PostgreSQL, bash, and su-exec
RUN apk add --no-cache postgresql postgresql-contrib bash su-exec

WORKDIR /app

# Install production dependencies including drizzle-kit for migrations
COPY package*.json ./
RUN npm ci --only=production && \
    npm install drizzle-kit && \
    npm cache clean --force

# Copy built files
COPY --from=build /app/dist ./dist

# Copy shared files and config
COPY shared ./shared
COPY drizzle.config.ts ./
COPY init-db.sql ./

# Copy startup script
COPY docker-standalone-start.sh ./
RUN chmod +x docker-standalone-start.sh

# Create uploads directory
RUN mkdir -p uploads

# Create postgres user and database directories
RUN adduser -D -s /bin/sh postgres && \
    mkdir -p /var/lib/postgresql/data && \
    chown -R postgres:postgres /var/lib/postgresql/data && \
    mkdir -p /run/postgresql && \
    chown -R postgres:postgres /run/postgresql

# Create non-root user for the app
RUN addgroup -g 1001 -S nodejs
RUN adduser -S gardenio -u 1001

# Set environment variables
ENV DATABASE_URL=postgresql://gardenio:gardenio123@localhost:5432/gardenio
ENV SESSION_SECRET=your-super-secret-session-key-change-in-production
ENV NODE_ENV=production
ENV PGDATA=/var/lib/postgresql/data

# Expose ports
EXPOSE 5000 5432

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Start the application with the standalone startup script
CMD ["./docker-standalone-start.sh"]